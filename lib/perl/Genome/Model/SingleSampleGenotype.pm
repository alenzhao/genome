package Genome::Model::SingleSampleGenotype;

use strict;
use warnings;

use Genome;

class Genome::Model::SingleSampleGenotype {
    is => 'Genome::Model',
    has_param => [
        aligner_version => {
            is => 'Text',
            doc => 'The version of speedseq to run',
        },
        aligner_params => {
            is => 'Text',
            is_optional => 1,
            doc => 'Params to pass to speedseq',
        },
        aligner_api_version => {
            is => 'Text',
            doc => 'Aligner API version',
        },
        qc_config => {
            is => 'Text',
            doc => 'Name of the QC configuration to use',
        },
        haplotype_caller_version => {
            is => 'Text',
            doc => 'Version of GATK to use',
        },
    ],
    has_input => [
        instrument_data => {
            is => 'Genome::InstrumentData',
            is_many => 1,
            doc => 'Instrument data to align',
        },
        target_region_set => {
            is => 'Genome::FeatureList',
            doc => 'the target region set for the instrument data',
            is_optional => 1,
        },
        region_of_interest_set => {
            is => 'Genome::FeatureList',
            doc => 'the region of interest set for the analysis',
            is_optional => 1,
        },
        reference_sequence_build => {
            is => 'Genome::Model::Build::ReferenceSequence',
            doc => 'the reference to which to align',
        },
        qc_genotype_vcf_file => {
            is => 'Genome::SoftwareResult::ImportedFile',
            doc => 'the VCF file with genotyping information for QC',
            is_optional => 1,
        },
    ],
    has_optional_mutable => [ #convenience mutators for config
        region_of_interest_set_name => {
            is => 'Text',
            via => 'region_of_interest_set',
            to => 'name',
        },
        target_region_set_name => {
            is => 'Text',
            via => 'target_region_set',
            to => 'name',
        },
        reference_sequence_build_id => {
            via => 'reference_sequence_build',
            to => 'id'
        },
    ],
    has_classwide => [
        aligner_name => {
            is_mutable => 0,
            value => 'speedseq',
        },
    ],
};

sub _resolve_workflow_for_build {
    my $self = shift;
    my $build = shift;

    my $dag = Genome::WorkflowBuilder::DAG->from_xml_filename(__FILE__ . '.xml');
    $dag->log_dir($build->log_directory);
    $dag->name($build->workflow_name);

    my ($alignment_op) = grep { $_->name eq 'Alignment' } @{$dag->operations};
    $alignment_op->lsf_resource(
        Genome::InstrumentData::Command::AlignAndMerge->lsf_resource_string_for_aligner_and_instrument_data(
            'speedseq',
            $build->instrument_data,
        )
    );

    return $dag;
}

sub map_workflow_inputs {
    my $self = shift;
    my $build = shift;

    my $result_users = Genome::SoftwareResult::User->user_hash_for_build($build);
    $result_users->{buckets_result} = $build;

    my $buckets = $build->reference_sequence_build->buckets($result_users);
    unless($buckets) {
        die $self->error_message('No buckets found for reference %s.  These can be generated by running `genome model single-sample-genotype prepare-reference-buckets` on this build.', $build->reference_sequence_build->__display_name__);
    }

    return (
        build => $build,
        buckets => [1..$buckets->count],
    );
}

sub add_target_region_set {
    my $self = shift;

    my $trs = Genome::FeatureList->get(@_) or die 'Failed to get FeatureList';
    $self->target_region_set($trs);
}

sub add_region_of_interest_set {
    my $self = shift;

    my $rois = Genome::FeatureList->get(@_) or die 'Failed to get FeatureList';
    $self->region_of_interest_set($rois);
}

sub add_reference_sequence_build {
    my $self = shift;

    my $build = Genome::Model::Build->get(@_);
    $self->reference_sequence_build($build);
}

sub add_qc_genotype_vcf_file {
    my $self = shift;

    my $vcf_file = Genome::SoftwareResult::ImportedFile->get(@_);
    $self->qc_genotype_vcf_file($vcf_file);

}

1;

