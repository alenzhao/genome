#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';
use Genome::Utility::Test qw(compare_ok);
use Test::More tests => 21;

my $test_dir = Genome::Config::get('test_inputs') . '/Genome-Model-SomaticValidation-Command-PrepareIndelValidationInput';
my $test_input_dir = "$test_dir/input.v1";
my $detected_variants = "$test_input_dir/indels.hq.bed";
my $variant_list = "$test_input_dir/variant_list.indels.hq.bed";

my $expected_dir = "$test_dir/expected.v1";
my $expected_both_dir = "$test_dir/expected.v1/both";
my $expected_listonly_dir = "$test_dir/expected.v1/listonly";
my $expected_dvonly_dir = "$test_dir/expected.v1/dvonly";

test_build($expected_both_dir, 'both');
test_build($expected_listonly_dir, 'list');
test_build($expected_dvonly_dir, 'dv');

sub test_build {
    my $expected_dir = shift;
    my $test_mode = shift;
    my $temp_build_data_dir = File::Temp::tempdir('t_SomaticValidation_Build-XXXXX', TMPDIR => 1, CLEANUP => 1);
    my $build_variants_dir = "$temp_build_data_dir/variants";
    my $build_indels = "$build_variants_dir/indels.hq.bed";
    Genome::Sys->create_directory($build_variants_dir);

    my $expected_large_bed = "$expected_dir/large_indels_to_validate.bed";
    my $expected_small_bed = "$expected_dir/small_indels_to_validate.bed";
    my $expected_small_anno = "$expected_dir/small_indels_to_validate.annotation";

    my $output_large_bed = "$temp_build_data_dir/validation/large_indel/indels_to_validate.bed";
    my $output_small_bed = "$temp_build_data_dir/validation/small_indel/indels_to_validate.bed";
    my $output_small_anno = "$temp_build_data_dir/validation/small_indel/indels_to_validate.annotation";

    # Copy the detected indels to where they are expected in the build data dir unless we arent considering the "dv2" indels
    if ($test_mode eq "dv" or $test_mode eq "both") {
        Genome::Sys->copy_file($detected_variants, $build_indels);
    }

    # Create the result for the indel variant list
    my $reference = Genome::Model::Build::ReferenceSequence->get_by_name('GRCh37-lite-build37');

    my $sample = Genome::Sample->create(
        name => 'test_sample_for_manual_result_' . $test_mode,
    );

    my $bed_result = Genome::Model::Tools::DetectVariants2::Result::Manual->create(
        original_file_path => $variant_list,
        variant_type => 'indel',
        sample_id => $sample->id,
        reference_build_id => $reference->id,
        format => 'bed',
    );
    isa_ok($bed_result, "Genome::Model::Tools::DetectVariants2::Result::Manual");

    my $class = "Genome::Model::SomaticValidation::Command::PrepareIndelValidationInput";
    use_ok($class);

    # Use the indel variant list unless we are testing the exclusion of it
    my %params = (data_directory => $temp_build_data_dir, normal_sample => $sample);
    if ($test_mode eq "list" or $test_mode eq "both") {
        $params{indel_variant_list} = $bed_result;
    }

    # Make a fake build with both the indel variant list and a "dv2" result
    my $build = Genome::Model::Build::SomaticValidation->__define__(%params);
    no warnings qw(once redefine);
    *Genome::Model::Build::SomaticValidation::run_indel_validation = sub { return 1; };
    use warnings;

    my $command = $class->create(
        build => $build,
    );
    isa_ok($command, $class);

    ok($command->execute, "Executed the $class command");

    # Diff files vs expected
    compare_ok($expected_large_bed, $output_large_bed, name => "large beds are the same");
    compare_ok($expected_small_anno, $output_small_anno, name => "small anno files are the same");
    compare_ok($expected_small_bed, $output_small_bed, name => "small beds are the same");

    return 1;
}

