#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Test::Factory::Model::SingleSampleGenotype;
use Genome::Test::Factory::Build;
use Sub::Install qw(reinstall_sub);
use Genome::Utility::Test qw(compare_ok);

my $pkg = "Genome::Model::SingleSampleGenotype::Command::ListOutputFiles";
use_ok($pkg);

my $model = Genome::Test::Factory::Model::SingleSampleGenotype->setup_object();
my $build = Genome::Test::Factory::Build->setup_object(model_id => $model->id);

for my $chr (qw(1 2 3 4 5 GL000207.1)) {
    my $r = Genome::Model::SingleSampleGenotype::Result::HaplotypeCaller->__define__(id => $chr);
    #$r->intervals([$chr]);
    #$r->output_dir("/test/$chr");
    Genome::SoftwareResult::User->create(
            software_result => $r,
            user => $build,
            label => "haplotype_caller_result",
        );
}
reinstall_sub({
    into => 'Genome::Model::SingleSampleGenotype::Result::HaplotypeCaller',
    as => 'intervals',
    code => sub {my $self = shift;
        my @intervals = ($self->id);
        if ($self->id eq "1") {
            push @intervals, "Y";
        }
        return @intervals;
    },
});

reinstall_sub({
    into => 'Genome::Model::SingleSampleGenotype::Result::HaplotypeCaller',
    as => 'output_dir',
    code => sub {my $self = shift;
        return "/test/".$self->id;
    },
});
my $cmd = $pkg->create(builds => [$build]);

my $out = Genome::Sys->create_temp_file_path;
open(SAVED_STDOUT, ">&STDOUT") || die "Can't save STDOUT\n";
open OUTPUT, ' >> '.$out or die $!;
STDOUT->fdopen(\*OUTPUT, 'w') or die $!;
$cmd->execute;
open(STDOUT, ">&SAVED_STDOUT") || die "Can't restore STDOUT\n";
my $expected_file = File::Spec->join(__FILE__.".d", "expected_out.txt");
compare_ok($out, $expected_file, "File created correctly");
done_testing;

