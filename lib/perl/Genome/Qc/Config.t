#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use JSON qw(encode_json);

my $pkg = 'Genome::Qc::Config';
use_ok($pkg);

my $test_dir = __FILE__ . '.d';

subtest 'valid config' => sub {
    my $config_name = 'valid config';
    my $config = Genome::Config::Parser::YAML->parse(File::Spec->join($test_dir, 'valid_config.yaml'));

    my $config_item = $pkg->create(
        name => $config_name,
        config => encode_json($config),
        type => 'all',
    );
    ok($config_item->isa($pkg), 'Config created');
    my @errors = $config_item->__errors__;
    is(scalar(@errors), 0, 'No errors are thrown');
};

my %invalid_config_files = (
    class_key => {
        error_message => "Missing key 'class' for config element",
        config_hash => {
            tool1 => {
                params => {
                    param1 => 'value1',
                    param2 => 'value2',
                }
            }
        }
    },
    params_key => {
        error_message => "Missing key 'params' for config element",
        config_hash => {
            tool1 => {
                class => 'Genome::Qc::Tool::Picard::CollectGcBiasMetrics',
            }
        }
    },
    class_exists => {
        error_message => 'Tool class \(Nonexistent::Class\) for config element \(tool1\) not found',
        config_hash => {
            tool1 => {
                class => 'Nonexistent::Class',
                params => {
                    param1 => 'value1',
                    param2 => 'value2',
                }
            }
        }
    },
);

while ( my ($test_name, $test_setup) = each %invalid_config_files ) {
    subtest "$test_name" => sub {
        my $config_item = $pkg->create(
            name => $test_name,
            config => encode_json($test_setup->{config_hash}),
            type => 'all',
        );

        my @errors = $config_item->__errors__;
        is(scalar(@errors), 1, 'One error is thrown');

        like($errors[0]->desc, qr/$test_setup->{error_message}/, "Test config '$test_name' fails ok" );
    };
}

done_testing;
