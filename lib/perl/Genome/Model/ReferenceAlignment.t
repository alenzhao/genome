#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above "Genome";

require File::Spec;
use Genome::Test::Factory::Model::ReferenceAlignment;
require Sub::Install;
use Test::Exception;
use Test::More tests => 8;

use_ok('Genome::Test::Factory::Model::ReferenceAlignment') or die;
my $m = Genome::Test::Factory::Model::ReferenceAlignment->setup_object();
ok($m, "got a model");
is($m->reference_sequence_name, 'test_model_1-build', 'The ref_seq of the model matches the expected');

my $data_directory = File::Spec->join('', 'mnt', 'model', 'build');
my $build = Genome::Model::Build->__define__(
    model => $m,
    data_directory => $data_directory,
);

Sub::Install::reinstall_sub({ # easy way to return this build to get it's data_directory
        code => sub{ return $build },
        into => 'Genome::Model',
        as => 'last_complete_build',
    });
my $f = $m->accumulated_alignments_directory;
is($f, File::Spec->join($data_directory, 'alignments'), "alignments directory");

is($m->experimental_subject, $m->subject, 'experimental subject return subject that is a sample');
ok(!$m->control_subject, 'control subject returns nothing');

is($m->default_model_name, 'sample_name_1.refalign', 'default_model_name'); 
Sub::Install::reinstall_sub({
        code => sub{ return 1; },
        into => 'Genome::Model::ReferenceAlignment',
        as => 'is_lane_qc',
    });
throws_ok(sub{ $m->default_model_name; }, qr/Attempting to get the default name when creating a lane qc model that does not have instrument data assigned/, 'failed to get default model name for lane qc model w/o instdata assigned'); 
