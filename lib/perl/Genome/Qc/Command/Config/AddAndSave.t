#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::Utility::Test qw(compare_ok);

my $add_pkg = 'Genome::Qc::Command::Config::Add';
use_ok($add_pkg);

my $save_pkg = 'Genome::Qc::Command::Config::SaveToFile';
use_ok($save_pkg);

my $test_dir = __FILE__ . '.d';

my $config_name = 'valid config';
my $config_path = File::Spec->join($test_dir, 'valid_config.yaml');
my $add_command = $add_pkg->create(
    name => $config_name,
    file_path => $config_path,
    type => 'all',
);
ok($add_command->execute);
ok(my $config_item = Genome::Qc::Config->get(name => $config_name));

my $duplicate_name_add_command = $add_pkg->create(
    name => $config_name,
    file_path => Genome::Sys->create_temp_file_path(),
    type => 'wgs',
);
throws_ok(sub { $duplicate_name_add_command->execute }, qr/A config item with name \($config_name\) already exists/);

my $saved_config_path = Genome::Sys->create_temp_file_path();
my $save_command = $save_pkg->create(
    config_item => $config_item,
    file_path => $saved_config_path,
);
ok($save_command->execute);
compare_ok($config_path, $saved_config_path, 'Saved file identical to original file');

done_testing;
