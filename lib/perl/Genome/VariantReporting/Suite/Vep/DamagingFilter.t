#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;
use Genome::VariantReporting::Suite::Vep::TestHelper qw(create_vcf_header create_entry_with_vep);

my $pkg = "Genome::VariantReporting::Suite::Vep::DamagingFilter";
use_ok($pkg) or die;
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('filters', $pkg->name), $pkg);

my $csq_format = 'Allele|Gene|Feature|Feature_type|Consequence|cDNA_position|CDS_position|Protein_position|Amino_acids|Codons|Existing_variation|DISTANCE|CANONICAL|SYMBOL|SYMBOL_SOURCE|SIFT|PolyPhen|HGVSc|HGVSp|Condel';

my $passes = {
    C => 1,
    G => 1,
};
my $fails = {
    C => 0,
    G => 0,
};

subtest "variant in splice site" => sub {
    my $entry = create_entry("splice_donor_variant", '', '', $csq_format);
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

subtest "intergenic variant" => sub {
    my $entry = create_entry("intergenic_variant", '', '', $csq_format);
    is_deeply({$pkg->filter_entry($entry)}, $fails);
};

subtest "nonsynonymous damaging variant in sift" => sub {
    my $entry = create_entry("missense_variant", "damaging(0.000001)", "tolerated(0.05)", $csq_format);
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

subtest "nonsynonymous damaging variant in polyphen" => sub {
    my $entry = create_entry("missense_variant", "tolerated(0.05)", "damaging(0.0001)", $csq_format);
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

subtest "nonsynonymous non-damaging variant" => sub {
    my $entry = create_entry("missense_variant", "tolerated(0.06)", "tolerated(0.06)", $csq_format);
    is_deeply({$pkg->filter_entry($entry)}, $fails);
};

subtest "nonsynonymous variant with no sift or polyphen scores" => sub {
    my $entry = create_entry("missense_variant", '', '', $csq_format);
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

sub create_entry {
    my $consequence = shift;
    my $sift = shift;
    my $polyphen = shift;
    my $csq_format = shift;
    unless (defined $sift) {
        $sift = "";
    }
    unless (defined $polyphen) {
        $polyphen = "";
    }
    my $vep_string = "CSQ=C|ENSG00000223659|ENST00000452176|Transcript|$consequence|||||||4680|YES|RP5-857K21.5|Clone_based_vega_gene|$sift|$polyphen|||,G|ENSG00000223695|ENST00000452176|Transcript|$consequence|||||||4680|YES|RP5-857K22.5|Clone_based_vega_gene|$sift|$polyphen|example_hgvsc||example_condel";
    my $entry = create_entry_with_vep($vep_string, $csq_format);
    return $entry;
}

done_testing;
