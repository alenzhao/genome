#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';
use Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb;

use Test::More tests => 3;


subtest 'default values' => sub {
    plan tests => 3;

    my $expected_dbname = 'rgekrjgekrjg';
    my $expected_host = 'foo-db-host.example.com';
    my $expected_port = '8394';
    local $ENV{XGENOME_DS_GMSCHEMA_SERVER} = qq(dbname=${expected_dbname};host=${expected_host};port=${expected_port});

    is(Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_get_default_database_name(),
        $expected_dbname,
        'dbname');
    is(Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_get_default_database_server(),
        $expected_host,
        'host');
    is(Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_get_default_database_port(),
        $expected_port,
        'port');
};

subtest 'collect_newly_created_allocations' => sub {
    plan tests => 3;

    my $cmd = Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb->create();
    ok($cmd, 'created Command');

    no warnings 'redefine';

    local *Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_make_iterator_for_template_allocations = sub {
        make_allocation_iterator_from_list(qw(b c e f i j));
    };

    local *Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_make_iterator_for_database_allocations = sub {
        make_allocation_iterator_from_list(qw(a b c e f h i j k));
    };

    my @expected = map { Genome::Disk::StrippedDownAllocation->new(id => $_, kilobytes_requested => 1) } qw(a h k);
    my @got = $cmd->collect_newly_created_allocations();
    is_deeply(\@got,
              \@expected,
              'got differences');

    local *Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_make_iterator_for_template_allocations = sub {
        make_allocation_iterator_from_list(qw(b c e f i j));
    };

    local *Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_make_iterator_for_database_allocations = sub {
        make_allocation_iterator_from_list(qw(b c e f i j));
    };
    @got = $cmd->collect_newly_created_allocations();
    is_deeply([],
              \@got,
              'no differences');
};

subtest 'report_allocations_to_delete' => sub {
    plan tests => 2;

    my $cmd = Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb->create();
    $cmd->dump_status_messages(0);
    $cmd->queue_status_messages(1);

    my $three_gb_in_kb = 3 * 1024 * 1024;
    my $one_gb_in_kb = 1024 * 1024;
    my @allocations = ( Genome::Disk::StrippedDownAllocation->new(id => 'a', kilobytes_requested => $three_gb_in_kb),
                        Genome::Disk::StrippedDownAllocation->new(id => 'b', kilobytes_requested => $three_gb_in_kb),
                        Genome::Disk::StrippedDownAllocation->new(id => 'c', kilobytes_requested => $one_gb_in_kb),
                      );

    $cmd->report_allocations_to_delete(@allocations);
    is_deeply([ $cmd->status_messages ],
              [ 'Removing 7 GB in 3 allocations.'],
              'report on deleted allocations');


    $cmd->report_allocations_to_delete();
    is_deeply([ $cmd->status_messages ],
              [ 'Removing 7 GB in 3 allocations.',
                'Removing 0 GB in 0 allocations.' ],
              'Report when no allocations are to be deleted');
};

#
#    no warnings 'redefine';
#
#    local *Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_make_iterator_for_template_allocations = sub {
#        make_allocation_iterator_from_list_with_kb_requested(b => 1, c => 2);
#    };
#    local *Genome::Model::Command::Admin::RemoveDiskAllocationsFromTestdb::_make_iterator_for_database_allocations = sub {
#        make_allocation_iterator_from_list_with_kb_requested(a => $three_gb_in_kb, b => 1, c => 2, d => $one_gb_in_kb);
#    };
#};

sub make_allocation_iterator_from_list {
    my @list = @_;
    return sub {
        my $alloc_id = shift @list;
        return unless defined $alloc_id;
        return Genome::Disk::StrippedDownAllocation->new(id => $alloc_id, kilobytes_requested => 1);
    };
}

sub make_allocation_iterator_from_list_with_kb_requested {
    my @list = @_;
    return sub {
        my $alloc_id = shift @list;
        return unless defiled $alloc_id;
        my $kb_requested = shift @list;
        return Genome::Disk::StrippedDownAllocation->new(id => $alloc_id, kilobytes_requested => $kb_requested);
    };
}
