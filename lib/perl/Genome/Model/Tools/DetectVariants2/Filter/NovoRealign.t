#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More; 
use File::Compare;
use File::Spec;
use File::Temp;
use IO::File;
use Genome::Test::Factory::SoftwareResult::User;
use Genome::Utility::Test 'compare_ok';

if (Genome::Sys->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 8;
}

my $class = 'Genome::Model::Tools::DetectVariants2::Filter::NovoRealign';
use_ok($class);

my $file_name = 'svs.hq';
my $test_input_dir  = Genome::Utility::Test->data_dir_ok($class, 'v2');
my $normal_bam  = $test_input_dir . 'chr16_17.normal.bam';
my $tumor_bam   = $test_input_dir . 'chr16_17.tumor.bam';
my $sv_file     = $test_input_dir . $file_name;

my $tmp_base = File::Temp::tempdir(
    'Genome-Model-Tools-DetectVariants2-Filter-NovoRealign-XXXXX', 
    TMPDIR => 1,
    CLEANUP => 1,
);

ok(-d $tmp_base, "temp output directory made at $tmp_base");
my $tmp_dir = File::Spec->join($tmp_base, 'filter');

my $refbuild_id = 109104543;   #human36_chr16_17_for_novo_test ref_seq_build I made for this test

my $result_users = Genome::Test::Factory::SoftwareResult::User->setup_user_hash(
    reference_sequence_build_id => $refbuild_id,
);

my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $test_input_dir,
    detector_name => 'Genome::Model::Tools::DetectVariants2::Breakdancer',
    detector_params => '',
    detector_version => '1.1',
    aligned_reads => $tumor_bam,
    control_aligned_reads => $normal_bam,
    reference_build_id => $refbuild_id,
);
$detector_result->lookup_hash($detector_result->calculate_lookup_hash());

my $sv_valid = Genome::Model::Tools::DetectVariants2::Filter::NovoRealign->create(
    previous_result_id => $detector_result->id,
    output_directory    => $tmp_dir,
    result_users => $result_users,
);

$sv_valid->dump_status_messages(1);

ok($sv_valid, 'created NovoRealign object');
ok($sv_valid->execute(), 'executed NovoRealign object OK');

my $tmp_out_file = File::Spec->join($tmp_dir, 'svs.lq');
my $expect_file  = File::Spec->join($test_input_dir, 'output_dir', 'svs.lq');
ok(-s $tmp_out_file, "output file svs.lq generated ok"); 
compare_ok($tmp_out_file, $expect_file, name => "output svs.lq matches as expected");

$tmp_out_file = File::Spec->join($tmp_dir, 'svs.hq');
my $tmp_out_file_noheader = $tmp_out_file.'.noheader';

my $fh = IO::File->new($tmp_out_file) or die "Failed to open $tmp_out_file\n";
my $out_fh = IO::File->new(">$tmp_out_file_noheader") or die "Failed to open $tmp_out_file_noheader for writing\n";

while (my $line = $fh->getline) {
    next if $line =~ /^#/;
    $out_fh->print($line);
}

$fh->close;
$out_fh->close;

$expect_file = File::Spec->join($test_input_dir, 'output_dir', 'svs.hq.noheader');
compare_ok($tmp_out_file_noheader, $expect_file, name => "output svs.hq matches as expected");

done_testing();
