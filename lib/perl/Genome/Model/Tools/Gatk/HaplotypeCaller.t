#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';

use Test::More;
use Genome::Utility::Test qw(compare_ok);
use File::Spec;

if (Genome::Sys->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 7;
}

my $pkg = 'Genome::Model::Tools::Gatk::HaplotypeCaller';
use_ok($pkg);

my $test_data_dir = Genome::Utility::Test->data_dir_ok($pkg, 'v1');
my $input_bam = File::Spec->join($test_data_dir, 'test.bam');
my $input_reference = File::Spec->join($test_data_dir, 'all_sequences.MT.fa');

my $output_dir = Genome::Sys->create_temp_directory();
my $output_filename = 'output.g.vcf';
my $output_vcf = File::Spec->join($output_dir, $output_filename);
my $expected_output_vcf = File::Spec->join($test_data_dir, $output_filename);

my $gatk_cmd = $pkg->create(
    version => '3.4',
    java_interpreter => Genome::Sys->java_executable_path('1.7'),
    max_memory => 2,
    input_bam => $input_bam,
    reference_fasta => $input_reference,
    emit_reference_confidence => 'GVCF',
    output_vcf => $output_vcf,
);
isa_ok($gatk_cmd, $pkg, "Made the command");
ok($gatk_cmd->execute, 'Executed the command');

ok(-s $output_vcf, 'output was created');
ok(-s "$output_vcf.idx", 'output was indexed');

compare_ok($output_vcf, $expected_output_vcf, name => 'file matched expectations', filters => [qr/^#.*$/]);
