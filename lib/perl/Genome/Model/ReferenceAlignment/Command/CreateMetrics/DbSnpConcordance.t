use strict;
use warnings;

use above 'Genome';
use Test::More;

use Genome::Test::Factory::Build;
use Genome::Test::Factory::InstrumentData::Solexa;
use Genome::Test::Factory::Model::ImportedVariationList;
use Genome::Test::Factory::Model::ReferenceAlignment;


if (Genome::Sys->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 26;
}

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use_ok("Genome::Model::ReferenceAlignment::Command::CreateMetrics::DbSnpConcordance");

my $snv_file_data = <<EOF
1\t2\t3\tA/T\t45
2\t2\t3\tA/T\t45
3\t2\t3\tA/T\t45
22\t2\t3\tA/T\t45
X\t2\t3\tA/T\t45
EOF
;

my $dbsnp_file_data = <<EOF
1\t2\t3\tA/T\t45
2\t2\t3\tA/T\t45
3\t2\t3\tA/T\t45
X\t2\t3\tA/T\t45
EOF
;

my $tmpdir = Genome::Sys->create_temp_directory();

my $build = setup_test_builds();
ok($build, 'created refalign build');

my $cmd = Genome::Model::ReferenceAlignment::Command::CreateMetrics::DbSnpConcordance->create(build => $build, output_dir => $tmpdir);
ok($cmd, "created command");
ok($cmd->execute, "executed command");

my $unfiltered_file= "$tmpdir/dbsnp_concordance.txt";
ok(-s $unfiltered_file, "unfiltered results exist");
my $results = Genome::Model::Tools::Joinx::SnvConcordanceByQuality::parse_results_file($unfiltered_file);
is(ref $results->{hit}, 'HASH', '$results->{hit} array exists');
is(ref $results->{all}, 'HASH', '$results->{all} array exists');
is(ref $results->{concordance}, 'HASH', '$results->{concordance} array exists');
is(4, $results->{total_hits}, '4 hits');
is(5, $results->{total_snvs}, '5 total snvs');
is(80, $results->{total_concordance}, '80% concordance');

my $filtered_file = "$tmpdir/dbsnp_concordance.filtered.txt";
ok(-s $filtered_file, "filtered results exist");
$results = Genome::Model::Tools::Joinx::SnvConcordanceByQuality::parse_results_file($filtered_file);
is(ref $results->{hit}, 'HASH', '$results->{hit} array exists');
is(ref $results->{all}, 'HASH', '$results->{all} array exists');
is(ref $results->{concordance}, 'HASH', '$results->{concordance} array exists');
is(4, $results->{total_hits}, '4 hits');
is(5, $results->{total_snvs}, '5 total snvs');
is(80, $results->{total_concordance}, '80% concordance');




sub setup_test_builds {
    my $test_instrument_data = Genome::Test::Factory::InstrumentData::Solexa->setup_object();
    ok($test_instrument_data, 'created test instrument data');

    my $test_model = Genome::Test::Factory::Model::ReferenceAlignment->setup_object();
    ok($test_model, 'created test model');
    ok($test_model->add_instrument_data($test_instrument_data), 'added inst data');

    my $test_build = Genome::Test::Factory::Build->setup_object(
        model_id => $test_model->id,
        data_directory => $tmpdir,
    );
    ok($test_build, 'created test build');

    $test_build->_verify_build_is_not_abandoned_and_set_status_to('Succeeded', 1);

    is_deeply($test_model->last_complete_build, $test_build, 'last succeeded build is the test build');

    mkdir("$tmpdir/snp_related_metrics") || die "Failed to create snp_related_metrics directory";
    my @snv_files = (
        "$tmpdir/snp_related_metrics/snps_all_sequences.v1.bed",
        "$tmpdir/snp_related_metrics/snps_all_sequences.filtered.v1.bed",
    );
    for my $file (@snv_files) {
        open(F, ">$file") || die "failed to open $file for writing";
        print F $snv_file_data;
        close(F);
    }
    my $dbsnp_file = "$tmpdir/dbsnp.bed";
    open(F, ">$dbsnp_file") || die "failed to open $dbsnp_file for writing";
    print F $dbsnp_file_data;
    close(F);

    my $dbsnp_model = Genome::Test::Factory::Model::ImportedVariationList->setup_object(
        reference => $test_model->reference_sequence_build,
        subject_id => $test_model->subject->id
    );
    ok($dbsnp_model, "created dbsnp model");

    my $result = Genome::Model::Tools::DetectVariants2::Result::Manual->create(
        description => "dbsnp-test-$$",
        original_file_path => $dbsnp_file,
        format => 'bed',
        variant_type => 'snv',
        reference_build => $test_model->reference_sequence_build,
    );
    ok($result, 'created test result');

    my $dbsnp_build = Genome::Test::Factory::Build->setup_object(
        model_id => $dbsnp_model->id,
        snv_result => $result,
    );
    ok($dbsnp_build, "created dbsnp build");

    $test_build->model->dbsnp_build($dbsnp_build);

    return $test_build;
}
