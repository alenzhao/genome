#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';
use Workflow::Simple;

use File::Compare;
use File::Temp;
use List::MoreUtils;

use Test::More;

if (Genome::Sys->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}

use_ok('Genome::Model::Build::DeNovoAssembly::Velvet') or die;

my $base_dir = Genome::Config::get('test_inputs') . '/Genome-Model/DeNovoAssembly';
my $archive_path = $base_dir.'/inst_data/-7777/archive.tgz';
ok(-s $archive_path, 'inst data archive path') or die;
my $example_dir = $base_dir.'/velvet_v23';
ok(-d $example_dir, 'example dir') or die;

my $tmpdir_template = "/DeNovoAssembly-Velvet.t-XXXXXXXX";
my $tmpdir = File::Temp::tempdir($tmpdir_template, CLEANUP => 1, TMPDIR => 1);
ok(-d $tmpdir, 'temp dir: '.$tmpdir);


my $taxon = Genome::Taxon->create(
    name => 'Escherichia coli TEST',
    domain => 'Bacteria',
    current_default_org_prefix => undef,
    estimated_genome_size => 4500000,
    current_genome_refseq_id => undef,
    ncbi_taxon_id => undef,
    ncbi_taxon_species_name => undef,
    species_latin_name => 'Escherichia coli',
    strain_name => 'TEST',
);
ok($taxon, 'taxon') or die;
my $sample = Genome::Sample->create(
    name => 'TEST-000',
);
ok($sample, 'sample') or die;
my $library = Genome::Library->create(
    name => $sample->name.'-testlibs',
    sample_id => $sample->id,
    library_insert_size  => 260,
);
ok($library, 'library') or die;

my $instrument_data = Genome::InstrumentData::Solexa->create(
    id => -7777,
    sequencing_platform => 'solexa',
    read_length => 100,
    subset_name => '8-CGATGT',
    index_sequence => 'CGATGT',
    run_name => 'XXXXXX/8-CGATGT',
    run_type => 'Paired',
    flow_cell_id => 'XXXXXX',
    lane => 8,
    library => $library,
    archive_path => $archive_path,
    clusters => 15000,
    fwd_clusters => 15000,
    rev_clusters => 15000,
    analysis_software_version => 'not_old_iilumina',
);
ok($instrument_data, 'instrument data');
ok($instrument_data->is_paired_end, 'inst data is paired');
ok(-s $instrument_data->archive_path, 'inst data archive path');

my $pp = Genome::ProcessingProfile::DeNovoAssembly->create(
    name => 'De Novo Assembly Velvet Test',
    coverage => 0.5,#25000,
    read_processor => 'trim remove -length 10 | rename illumina-to-pcap',
    assembler_name => 'velvet one-button',
    assembler_version => '0.7.57-64',
    #assembler_params => '-hash_sizes 31 33 35 -min_contig_length 100',
    assembler_params => '-max_gap_count 3 -max_divergence 0.2 -hash_sizes 31 33 35 -min_contig_length 100',
    post_assemble => 'standard-outputs -min_contig_length 50',
);
ok($pp, 'pp') or die;

my $model = Genome::Model::DeNovoAssembly->create(
    processing_profile => $pp,
    subject_name => $taxon->name,
    subject_type => 'species_name',
    center_name => 'WUGC',
);
ok($model, 'soap de novo model') or die;
ok($model->add_instrument_data($instrument_data), 'add inst data to model');

my $build = Genome::Model::Build::DeNovoAssembly->create(
    model => $model,
    data_directory => $tmpdir,
);
ok($build, 'created build');
my $example_build = Genome::Model::Build->create(
    model => $model,
    data_directory => $example_dir,
);
ok($example_build, 'create example build');

# MISC 
is($build->center_name, $build->model->center_name, 'center name');
is($build->genome_size, 4500000, 'Genome size');
is($build->calculate_average_insert_size, 260, 'average insert size');

# COVERAGE/KB USAGE
is($build->calculate_base_limit_from_coverage, 2_250_000, 'Calculated base limit');
is($build->calculate_estimated_kb_usage, (5_056_250), 'Kb usage based on coverage');
is($build->calculate_reads_attempted, (30000), 'Calculate reads attempted');
my $coverage = $model->processing_profile->coverage;
$pp->coverage(undef); #undef this to allow calc by proc reads coverage
is($build->calculate_estimated_kb_usage, (5_060_000), 'Kb usage w/o coverage');
$pp->coverage($coverage);


my $workflow = $pp->_resolve_workflow_for_build($build);
$workflow->validate();
ok($workflow->is_valid, 'workflow validated');

my %workflow_inputs = $model->map_workflow_inputs($build);
my %expected_workflow_inputs = (
        build => $build,
        instrument_data => [$instrument_data],
    );
is_deeply(\%workflow_inputs, \%expected_workflow_inputs,
    'map_workflow_inputs succeeded');

my $workflow_xml = $workflow->save_to_xml();
my $success = Workflow::Simple::run_workflow($workflow_xml, %workflow_inputs);
ok($success, 'workflow completed');


my @existing_assembler_input_files = $build->existing_assembler_input_files;
is(@existing_assembler_input_files, 1, 'assembler input files exist');
my @example_existing_assembler_input_files = $example_build->existing_assembler_input_files;
is(@existing_assembler_input_files, 1, 'example assembler input files do not exist');
is(File::Compare::compare($existing_assembler_input_files[0],
        $example_existing_assembler_input_files[0]),
    0, 'assembler input file matches');

# ASSEMBLE
my $queue = Genome::Config::get('lsf_queue_build_worker_alt');
my %assembler_params = $build->assembler_params;
#print Data::Dumper::Dumper(\%assembler_params);
is_deeply(
    \%assembler_params,
    {
        'version' => '0.7.57-64',
        'min_contig_length' => '100',
        'file' => $existing_assembler_input_files[0],
        'ins_length' => '260',
        'hash_sizes' => [
        '31',
        '33',
        '35'
        ],
        'output_dir' => $build->data_directory,
        'genome_len' => '4500000',
        'max_divergence' => '0.2',
        'max_gap_count'  => 3,
    },
    'assembler params',
);

for my $file_name (qw/ contigs_fasta_file sequences_file assembly_afg_file /) {
    my $file = $build->$file_name;
    ok(-s $file, "Build $file_name exists");
    my $example_file = $example_build->$file_name;
    ok(-s $example_file, "Example $file_name exists");
    is(File::Compare::compare($file, $example_file), 0, "Generated $file_name matches example file");
}

# POST ASSEMBLE
foreach my $file_name (qw/ 
    reads.placed readinfo.txt
    gap.txt contigs.quals contigs.bases
    reads.unplaced reads.unplaced.fasta
    supercontigs.fasta supercontigs.agp
    /) {
    my $example_file = $example_dir.'/edit_dir/'.$file_name;
    ok(-e $example_file, "$file_name example file exists");
    my $file = $build->data_directory.'/edit_dir/'.$file_name;
    ok(-e $file, "$file_name file exists");
    is(File::Compare::compare($file, $example_file), 0, "$file_name files match");
}

# Report and Metrics
ok( -s $build->reports_directory.'/Summary/report.html', 'create summary html');
ok( -s $build->stats_file, 'created stats file' );
ok( -s $example_build->stats_file, 'example build stats file exists' );
is(File::Compare::compare($example_build->stats_file,$build->stats_file), 0, 'Stats files match' );

my %expected_metrics = (
    'assembly_length' => 392171,
    'contigs_average_length' => 148,
    'contigs_count' => 2658,
    'contigs_length' => 392171,
    'contigs_major_average_length' => 0,
    'contigs_major_count' => 0,
    'contigs_major_length' => 0,
    'contigs_major_n50_count' => 0,
    'contigs_major_n50_length' => 0,
    'contigs_n50_count' => 1108,
    'contigs_n50_length' => 142,
    'genome_size' => '4500000',
    'insert_size' => '260',
    'major_contig_threshold' => '500',
    'reads_assembled' => 8290,
    'reads_assembled_duplicate' => 0,
    'reads_assembled_success' => '0.332',
    'reads_attempted' => 30000,
    'reads_processed' => 25000,
    'reads_processed_success' => '0.833',
    'supercontigs_average_length' => 148,
    'supercontigs_count' => 2657,
    'supercontigs_length' => 392171,
    'supercontigs_major_average_length' => 0,
    'supercontigs_major_count' => 0,
    'supercontigs_major_length' => 0,
    'supercontigs_major_n50_count' => 0,
    'supercontigs_major_n50_length' => 0,
    'supercontigs_n50_count' => 1107,
    'supercontigs_n50_length' => 142,
);

my @build_metric_names = sort(map {$_->name} $build->metrics);
my @unique_build_metric_names = sort(List::MoreUtils::uniq(@build_metric_names));

is_deeply(\@build_metric_names, \@unique_build_metric_names,
    'no duplicate metrics');

print Data::Dumper::Dumper(@build_metric_names);

my @expected_metric_names = sort(keys %expected_metrics);
is_deeply(\@build_metric_names, \@expected_metric_names,
    'expected metric names match');

for my $metric_name (@build_metric_names) {
    is($build->get_metric($metric_name), $expected_metrics{$metric_name},
        "metric ok: '$metric_name'" );
}

done_testing();
