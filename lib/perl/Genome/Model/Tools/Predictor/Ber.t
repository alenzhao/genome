#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::MockObject::Extends;
use File::Path qw(make_path);
use Genome::Utility::Test qw(compare_ok);

Genome::Config::set_env('sys_no_cleanup', 1);

my $ber_predictor_class = 'Genome::Model::Tools::Predictor::Ber';
use_ok($ber_predictor_class) or die;
my $ber_blastp_class = 'Genome::Model::Tools::Predictor::Ber::Blastp';
use_ok($ber_blastp_class) or die;
my $ber_hmmpfam_class = 'Genome::Model::Tools::Predictor::Ber::Hmmpfam';
use_ok($ber_hmmpfam_class) or die;
my $ber_annotate_class = 'Genome::Model::Tools::Predictor::Ber::Annotate';
use_ok($ber_annotate_class) or die;


my $test_data_path = Genome::Config::get('test_inputs') . '/Genome-Model-Tools-Predictor/Ber/';
my $test_fasta = join('/', $test_data_path, 'BER.fa');
ok(-e $test_fasta, "test fasta file exists")or diag "test_fasta: $test_fasta";

my $version = '2.5';

my %example_fasta_headers = ( 
    q/>augustus-ANCCEYDFT_Contig1-abinit-gene-16.0-mRNA-1 12345 23456/ => 'ANCCEYDFT', 
    q/>maker-TELCIRDFT_Contig1-augustus-gene-13.55-mRNA-1 12345 23456/ => 'TELCIRDFT', 
    q/>maker-ANCCEYDFT_Contig14-augustus-gene-4.40-mRNA-1 12345 23456/ => 'ANCCEYDFT', 
    q/>ANCCEYDFT_Contig368.sn_ac13cgmkv2.22 12345 23456/ => 'ANCCEYDFT', 
    q/>BACCOPFNL_Contig459GeneMark.1_plus_more_stuff 12345 23456/ => 'BACCOPFNL',
);

for my $header (keys %example_fasta_headers) {
    my $temp_output_dir = Genome::Sys->create_temp_directory();
    ok(-d $temp_output_dir, "created temp output dir at $temp_output_dir");
    my $file = $temp_output_dir.'/test_fasta.fa';
    Genome::Sys->write_file($file, $header);
    my $ber = Genome::Model::Tools::Predictor::Ber->create(
        output_directory => $temp_output_dir,
        input_fasta_file => $test_fasta,
        version => $version,
        dump_predictions_to_file => 1,
    );
    ok($ber, 'successfully created ber command object');
    my $mocked_ber = Test::MockObject::Extends->new($ber);
    $mocked_ber->mock('input_fasta_file', sub {$file});
    is($ber->_get_locus_from_fasta_header, $example_fasta_headers{$header}, 'locus derivation good');
    unlink $file;
}

my $test_file = join('/', $test_data_path, 'ber/augustus-TESTLOCUS_Contig98-processed-gene-0.0-mRNA-1.blastp');
is(Genome::Model::Tools::Predictor::Ber::Blastp->no_blast_hits($test_file), 0, 'has blast hits');

$test_file = join('/', $test_data_path, 'ber/maker-TESTLOCUS_Contig99-augustus-gene-1.25-mRNA-1.blastp');
is(Genome::Model::Tools::Predictor::Ber::Blastp->no_blast_hits($test_file), 1, 'has no blast hits');

$test_file = join('/', $test_data_path, 'hmm/augustus-TESTLOCUS_Contig98-processed-gene-0.0-mRNA-1.hmmpfam');
is(Genome::Model::Tools::Predictor::Ber::Hmmpfam->no_domain_hits($test_file), 0, 'has domain hits');

$test_file = join('/', $test_data_path, 'hmm/augustus-TESTLOCUS_Contig1683-abinit-gene-0.0-mRNA-1.hmmpfam');
is(Genome::Model::Tools::Predictor::Ber::Hmmpfam->no_domain_hits($test_file), 1, 'has no domain hits');



my $temp_output_dir = Genome::Sys->create_temp_directory();
ok(-d $temp_output_dir, "created temp output dir at $temp_output_dir");
my $temp_ber_source = $temp_output_dir.'/ber_source';
ok(make_path($temp_ber_source.'/data/genomes/'), 'make path for test');
ok(make_path($temp_ber_source.'/data/db/CSV/'), 'make path for test');

my $ber = Genome::Model::Tools::Predictor::Ber->create(
    output_directory => $temp_output_dir,
    input_fasta_file => $test_fasta,
    version => $version,
    dump_predictions_to_file => 1,
);

_cleanup($ber->ber_source_path);

for my $in ([1,0],[0,1],[1,1],[0,0]) {
    my $workflow = $ber->generate_work_flow(@$in);
    ok($workflow, 'workflow generated with inputs '.@$in);
    my @errors = $workflow->validate;
    is(@errors, 0, 'workflow validated');
}

ok($ber, 'successfully created ber command object');
my $fasta_files = $ber->setup;
is(@$fasta_files, 1, 'setup fasta files');

$test_file = join('/', $test_data_path, '/fasta/augustus-TESTLOCUS_Contig98-processed-gene-0.0-mRNA-1.fasta');
my $test_fasta_file = $test_file;
my $gen_test_file = join('/', $temp_output_dir, '/fasta/augustus-TESTLOCUS_Contig98-processed-gene-0.0-mRNA-1.fasta');
compare_ok($test_file, $gen_test_file, 'fasta file match');



my $ber_blastp = Genome::Model::Tools::Predictor::Ber::Blastp->create(
    output_directory => $temp_output_dir,
    input_fasta_file => $test_fasta_file,
    ber_source_path => $ber->ber_source_path,
);
ok($ber_blastp, 'successfully created ber blastp command object');


my $ber_hmmpfam = Genome::Model::Tools::Predictor::Ber::Hmmpfam->create(
    output_directory => $temp_output_dir,
    input_fasta_file => $test_fasta_file,
    ber_source_path => $ber->ber_source_path,
);
ok($ber_hmmpfam, 'successfully created ber hmmpfam command object');


my $ber_annotate = Genome::Model::Tools::Predictor::Ber::Annotate->create(
    output_directory => $temp_output_dir,
    ber_source_path => $ber->ber_source_path,
    locus_id        => 'TESTLOCUS',
    gram_stain      => 'negative',
    converge_result => 1,
);
ok($ber_annotate, 'successfully created ber annotate command object');



_cleanup($ber->ber_source_path);

done_testing();

exit;

sub _cleanup {
    my $ber_path = shift;
    #cleanup links in ber source dirs
    unlink($ber_path.'/data/genomes/TESTLOCUS');
    unlink($ber_path.'/data/db/CSV/TESTLOCUS_asm_feature');
    unlink($ber_path.'/data/db/CSV/TESTLOCUS_asmbl_data');
    unlink($ber_path.'/data/db/CSV/TESTLOCUS_ident2');
    unlink($ber_path.'/data/db/CSV/TESTLOCUS_stan');
    unlink($ber_path.'/data/db/SQLite/TESTLOCUS');
}
