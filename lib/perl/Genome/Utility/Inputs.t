#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Data::Dump 'pp';
use Test::Exception;
use Test::More;
use Test::Deep;
use above 'Genome';
use Genome::Utility::Inputs qw(
    encode
    decode
);

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

{
    package TestObject;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class TestObject {
        is => ['UR::Object'],
    };
}

subtest "Basic" => sub {
    my $inputs = {
        a => TestObject->create(),
        b => TestObject->create(),
        c => 'foo',
    };
    my $other_inputs = {
        a => TestObject->create(),
        b => TestObject->create(),
        c => 'foo',
    };

    ok(!eq_deeply($inputs, $other_inputs), "Different inputs don't compare as equal (sanity)");

    ok(Scalar::Util::blessed($inputs->{a}), "Raw value is a blessed reference");
    ok(!Scalar::Util::blessed(encode($inputs)->{a}), "Encoded value is **not** a blessed reference");

    cmp_deeply(decode(encode($inputs)), $inputs, "Roundtrip successful");
};

subtest "ARRAY" => sub {
    my $inputs = {
        a => [TestObject->create(), TestObject->create()],
        b => TestObject->create(),
        c => 'foo',
    };

    ok(Scalar::Util::blessed($inputs->{a}->[0]), "Raw ARRAY element is a blessed reference");
    ok(!Scalar::Util::blessed(encode($inputs)->{a}->[0]), "Encoded ARRAY element is **not** a blessed reference");

    cmp_deeply(decode(encode($inputs)), $inputs, "Roundtrip successful");
};

subtest "Mixed ARRAY" => sub {
    plan skip_all => "We don't currently support mixed arrays";
    my $inputs = {
        a => ['taco', TestObject->create()],
    };

    ok(Scalar::Util::blessed($inputs->{a}->[1]), "Raw ARRAY element is a blessed reference");
    ok(!Scalar::Util::blessed(encode($inputs)->{a}->[1]), "Encoded ARRAY element is **not** a blessed reference");

    cmp_deeply(decode(encode($inputs)), $inputs, "Roundtrip successful");
};

subtest "Nested ARRAY" => sub {
    plan skip_all => "We don't currently support nested arrays";
    my $inputs = {
        a => [[TestObject->create()]],
    };

    ok(Scalar::Util::blessed($inputs->{a}->[0]->[0]), "Raw ARRAY element is a blessed reference");
    ok(!Scalar::Util::blessed(encode($inputs)->{a}->[0]->[0]), "Encoded ARRAY element is **not** a blessed reference");

    cmp_deeply(decode(encode($inputs)), $inputs, "Roundtrip successful");
};

subtest "Convert Hash to Object" => sub {
    my $hash = { class => 'TestObject', id => 'blah', };
    my $msg = "Couldn't convert hash to class: ".pp($hash);
    throws_ok(
        sub{ Genome::Utility::Inputs::convert_hash_to_obj($hash);},
        qr/$msg/,
        'convert_hash_to_obj fails when object cannot be found',
    );
};

done_testing();
