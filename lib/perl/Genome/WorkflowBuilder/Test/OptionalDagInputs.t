#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use Test::Exception;
use above 'Genome';
use Genome::Utility::Test qw(compare_ok);

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $code_test_dir = __FILE__ . '.d';

my $valid_workflow_file = File::Spec->join($code_test_dir,
    'valid_workflow.xml');
my $invalid_workflow_file = File::Spec->join($code_test_dir,
    'invalid_workflow.xml');

{
    my $dag = Genome::WorkflowBuilder::DAG->from_xml_filename(
        $valid_workflow_file);
    my $got_xml = Genome::Sys->write_temp_file($dag->get_xml);
    compare_ok($got_xml, $valid_workflow_file,
        "Roundtrip with isOptional works");
}


subtest "Valid workflow" => sub {
    my $dag = Genome::WorkflowBuilder::DAG->from_xml_filename(
        $valid_workflow_file);

    lives_ok sub{$dag->remove_all_links_to_unused_input_properties()};
};

subtest "Invalid workflow" => sub {
    my $dag = Genome::WorkflowBuilder::DAG->from_xml_filename(
        $invalid_workflow_file);

    lives_ok sub{$dag->validate}, 'Passed validation before removing links';
    lives_ok sub{$dag->remove_all_links_to_unused_input_properties()},
        'Can remove unused links';
    throws_ok sub{$dag->validate}, qr(baz.*level 1.*not an input or param),
        "Fails validation after removing links";
};


done_testing();
