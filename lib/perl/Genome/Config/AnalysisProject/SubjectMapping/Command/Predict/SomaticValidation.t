#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
      $ENV{UR_DBI_NO_COMMIT} = 1;
      $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use Test::More;

use Genome::Utility::Test qw/compare_ok/; 

use Genome::Test::Factory::Sample;
use Genome::Test::Factory::InstrumentData::Imported;
use Genome::Test::Factory::AnalysisProject;

use File::Spec qw/join/;

use above 'Genome';

my $test_dir = __FILE__.'.d';
my $expected_somatic_subject_mapping = File::Spec->join($test_dir,'somatic_subject_mapping.tsv');
my $expected_germline_subject_mapping = File::Spec->join($test_dir,'germline_subject_mapping.tsv');
my $expected_tumor_only_subject_mapping = File::Spec->join($test_dir,'tumor_only_subject_mapping.tsv');

my $class = 'Genome::Config::AnalysisProject::SubjectMapping::Command::Predict::SomaticValidation';
use_ok($class);

my $individual = Genome::Test::Factory::Individual->setup_object(name => 'test');

my $normal_instrument_data = setup_instrument_data('normal');

my $tumor_instrument_data = setup_instrument_data('tumor');

test_subject_mapping('Germline',$normal_instrument_data,undef,$expected_germline_subject_mapping);

test_subject_mapping('Tumor Only',$tumor_instrument_data,undef,$expected_tumor_only_subject_mapping);

test_subject_mapping('Somatic Discovery',$tumor_instrument_data,$normal_instrument_data,$expected_somatic_subject_mapping); 

done_testing();

sub test_subject_mapping {
    my ($test_name,$inst_data_1, $inst_data_2, $expected_subject_mapping) = @_;

    my $analysis_project = Genome::Test::Factory::AnalysisProject->setup_object();

    Genome::Config::AnalysisProject::InstrumentDataBridge->create(
        analysis_project => $analysis_project,
        instrument_data => $inst_data_1,
    );
    if (defined($inst_data_2)) {
       Genome::Config::AnalysisProject::InstrumentDataBridge->create(
          analysis_project => $analysis_project,
          instrument_data => $inst_data_2,
       );
    }

    my $predicted_subject_mapping = Genome::Sys->create_temp_file_path();

    my $predict_cmd = $class->create(
        analysis_project => $analysis_project,
        file_path => $predicted_subject_mapping,
        sample_identifier => 'name',
    );
    ok($predict_cmd,$test_name .' created the prediction command for the first time');
    ok($predict_cmd->execute(),$test_name .' execute the prediction command for the first time');

    compare_ok($expected_subject_mapping,$predicted_subject_mapping,$test_name .' expected and predicted match');

    my $import_cmd = Genome::Config::AnalysisProject::SubjectMapping::Command::Import::SomaticValidation->create(
        analysis_project => $analysis_project,
        file_path => $predicted_subject_mapping,    
    );
    ok($import_cmd,$test_name .' created the import command with predicted subject mapping');
    ok($import_cmd->execute(), $test_name .' execute the import command with predicted subject mapping');

    my $predicted_subject_mapping_2 = Genome::Sys->create_temp_file_path();
    my $predict_cmd_2 = $class->create(
        analysis_project => $analysis_project,
        file_path => $predicted_subject_mapping_2,
        sample_identifier => 'name',
    );
    ok($predict_cmd_2,$test_name .' created the second attempt to predict subject mapping');

    ok($predict_cmd_2->execute(),$test_name .' execute second attempt to predict subject mapping');
    ok(-z $predicted_subject_mapping_2,$test_name .' second attempt, file exists and has zero size');
}

sub setup_instrument_data {
    my $common_name = shift;
    my $extraction_type = shift || 'genomic dna';

    my $sample_name = 'test-'. $common_name;
    my $sample = Genome::Test::Factory::Sample->setup_object(
       name => $sample_name,
       source_id => $individual->id,
       common_name => $common_name,
       extraction_type => $extraction_type,
    );
    my $library = Genome::Test::Factory::Library->setup_object(
       name => $sample_name .'-lib1',
       sample => $sample,
    );
    my $instrument_data = Genome::Test::Factory::InstrumentData::Imported->setup_object(
       sample => $sample,
       library => $library,
    );
    return $instrument_data;
}   
