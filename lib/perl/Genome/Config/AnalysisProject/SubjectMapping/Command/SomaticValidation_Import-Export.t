#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use Test::More tests => 4;
use Test::Deep qw(cmp_bag);
use Genome::Test::Factory::Sample;

use above 'Genome';

my $number_of_mappings = 2;
my $import_class = 'Genome::Config::AnalysisProject::SubjectMapping::Command::Import::SomaticValidation';
use_ok($import_class);

my $export_class = 'Genome::Config::AnalysisProject::SubjectMapping::Command::Export::SomaticValidation';
use_ok($export_class);

my $test_file = _test_file();
my $analysis_project = Genome::Config::AnalysisProject->__define__(name => 'test proj');

subtest 'import command' => sub{
    my $cmd = $import_class->create(
        analysis_project => $analysis_project,
        file_path => $test_file,
    );

    isa_ok($cmd, $import_class);

    my $res = $cmd->execute();
    ok($res, 'command ran successfully');

    is($res, $number_of_mappings,
        "we expected to create $number_of_mappings subject mappings and did");

    my @mappings = $analysis_project->subject_mappings;
    is(scalar(@mappings), $number_of_mappings,
        'we associated the correct number of pairings with the AnalysisProject');

    for my $mapping (@mappings) {
        my @tags = $mapping->tags;
        ok(scalar(@tags), 'tags found assigned to mapping');
    }
};

subtest 'export command' => sub {
    my $output = Genome::Sys->create_temp_file_path;
    my $cmd = $export_class->create(
        analysis_project => $analysis_project,
        file_path => $output,
    );

    isa_ok($cmd, $export_class);

    my $res = $cmd->execute;
    ok($res, 'command ran successfully');

    my @file_contents = Genome::Sys->read_file($output);
    is(scalar(@file_contents), $number_of_mappings,
        "we expected to create $number_of_mappings lines and did");

    my @column_counts = map { my @col = split("\t",$_); scalar @col; } @file_contents;
    cmp_bag(\@column_counts, [6,7], 'found expected number of columns in each line');

    for my $field ( map { split("\t",$_) } @file_contents ) {
        ok($field, 'the column in the output was filled in');
    }
};



sub _test_file {
    my ($fh, $path) = Genome::Sys->create_temp_file();

    for(1..$number_of_mappings) {
        if ($_ % 2 == 0) {
            $fh->printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
                Genome::Test::Factory::Sample->setup_object()->id,
                Genome::Test::Factory::Sample->setup_object()->id,
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                Genome::Config::Tag->__define__(name => 'test'.$_)->id,
                Genome::Config::Tag->__define__(name => 'second_test'.$_)->name,
            );
        } else {
            $fh->printf("%s\t%s\t%s\t%s\t%s\t%s\n",
                Genome::Test::Factory::Sample->setup_object()->name,
                Genome::Test::Factory::Sample->setup_object()->name,
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                Genome::Model::Tools::DetectVariants2::Result::Manual->__define__()->id,
                Genome::Config::Tag->__define__(name => 'test'.$_)->name,
            );
        }
    }

    $fh->close();
    return $path;
}
