#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Test::More;

use_ok('Genome::Model::Command::Copy') or die;

# Test changes to indirect models
my $source_model = Genome::Model->get(2888708572),
my @models_before = Genome::Model->is_loaded("name like" => "__COPY_TEST3__%");

## test cleanup for indirect recursive model creation when params have errors in a deeply nested model
eval {
    Genome::Model::Command::Copy->execute(
        model => $source_model,
        overrides => ['name=__COPY_TEST3__','wgs_model.tumor_model.processing_profile=2828673','wgs_model.normal_model.processing_profile=282673','exome_model.normal_model.processing_profile=2828673'],
    );
};
ok($@, "got exception with bad param");
my @models_after = Genome::Model->is_loaded("name like" => "__COPY_TEST3__%");
is(scalar(@models_after), 0, "zero models created due to transaction wrappers");

## now test the same without any errors in params
Genome::Model::Command::Copy->execute(
    model => $source_model,
    overrides => ['name=__COPY_TEST4__','wgs_model.tumor_model.processing_profile=2828673','wgs_model.normal_model.processing_profile=2828673','exome_model.normal_model.processing_profile=2828673'],
);
@models_after = Genome::Model->is_loaded("name like" => "__COPY_TEST4__%");
is(scalar(@models_after), 6, "found 6 new models matching the naming convention") 
    or do { diag(map { $_->name } @models_after) };


# Test ModelDeprecated

my $sample_deprecated = Genome::Sample->create(name => '__TEST_SAMPLE_1__');
my $model_deprecated = Genome::Model->get(2862809551); # apipe-test-04-ref_align
ok($model_deprecated, 'model');
$model_deprecated->target_region_set_name('BULLS_EYE');
is($model_deprecated->target_region_set_name, 'BULLS_EYE', 'set target region set name');
my $copy_deprecated = Genome::Model::Command::Copy->create( # use 37 instead of 36
    model => $model_deprecated,
    overrides => [ 
        'name=__COPY_DEPRECATED_TEST1__',
        'subject='.$sample_deprecated->id,
        'processing_profile=name=Feb 2011 Default Reference Alignment',
        'reference_sequence_build=102671028',
        'dbsnp_build=id=106375969',
        'annotation_reference_build=',  
        'target_region_set_name=',
        'instrument_data=',
    ],
);
ok($copy_deprecated, 'create');
$copy_deprecated->dump_status_messages(1);
ok($copy_deprecated->execute, 'execute');
my $new_model_deprecated = Genome::Model->get(name => '__COPY_DEPRECATED_TEST1__');
ok($new_model_deprecated, 'copied model');
is_deeply($new_model_deprecated->subject, $sample_deprecated, 'override subject');
is($new_model_deprecated->processing_profile->id, 2580856, 'override pp id');
is($new_model_deprecated->reference_sequence_build->id, 102671028, 'override ref seq build');
ok(!$new_model_deprecated->annotation_reference_build, 'undef annotation build');
ok(!$new_model_deprecated->annotation_reference_build_id, 'undef annotation build id');
is($new_model_deprecated->dbsnp_build->id, 106375969, 'override dbsnp build');
ok(!$new_model_deprecated->target_region_set_name, 'undef target region set name');
is_deeply([$new_model_deprecated->instrument_data], [], 'did not copy inst data');

my $rv_deprecated = system(qq(genome model copy 2862809551 name=__COPY_DEPRECATED_TEST2__ processing_profile='name=Feb 2011 Default Reference Alignment' target_region_set_name='CAMBRIDGE'));
is($rv_deprecated, 0, 'command line');


# Test Model

my $taxon = Genome::Taxon->create(name => '__TEST_SAMPLE_1__');
my $model = Genome::Model->get('8a175224cae14b80ab36d749216efb2b'); # apipe-test-clinseq-wer
ok($model, 'model');
my $copy = Genome::Model::Command::Copy->create( # use 37 instead of 36
    model => $model,
    overrides => [ 
        'name=__COPY_TEST1__',
        'subject='.$taxon->id,
    ],
);
ok($copy, 'create');
$copy->dump_status_messages(1);
ok($copy->execute, 'execute');
my $new_model = Genome::Model->get(name => '__COPY_TEST1__');
ok($new_model, 'copied model');
is_deeply($new_model->subject, $taxon, 'override subject');

my $rv = system(qq(genome model copy 8a175224cae14b80ab36d749216efb2b name=__COPY_TEST2__ subject=name='human'));
is($rv, 0, 'command line');

done_testing();
