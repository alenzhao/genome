#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Utility::Test qw(compare_ok);

my $pkg = 'Genome::Model::Tools::Bedpe::EvaluateBedpe';
use_ok($pkg);
my $version = "v1";

my $data_dir = Genome::Utility::Test->data_dir_ok($pkg, $version);

subtest "Basic" => sub {
    my $cmd = $pkg->create(
        bedpe => File::Spec->join($data_dir, 'a.bedpe'),
        gold_bedpe => File::Spec->join($data_dir, 'gold.bedpe'),
        bedtools_version => '2.17.0',
        slop => 0,
    );
    ok($cmd->execute, "Command executed ok");

    my $expected_stats = {
        true_positive => 1,
        false_positive => 1,
        false_negative => 1,
        ppv => .5,
        sensitivity => .5,
        f1 => .5,
        total_unique_calls => 2,
        total_unique_gold_calls => 2,
    };
    is_deeply($cmd->rawstats, $expected_stats, "stats were set correctly");
};

subtest "Only one hit per sv" => sub {
    my $cmd = $pkg->create(
        bedpe => File::Spec->join($data_dir, 'a.bedpe'),
        gold_bedpe => File::Spec->join($data_dir, 'gold2.bedpe'),
        bedtools_version => '2.17.0',
        slop => 1000,
    );
    ok($cmd->execute, "Command executed ok");

    my $expected_stats = {
        true_positive => 1,
        false_positive => 1,
        false_negative => 0,
        ppv => .5,
        sensitivity => 1,
        f1 => 0.666666666666667,
        total_unique_calls => 2,
        total_unique_gold_calls => 2,
    };
    is_deeply($cmd->rawstats, $expected_stats, "stats were set correctly");
};

subtest "Require two hits" => sub {
    my $tp = Genome::Sys->create_temp_file_path;
    my $expected_tp = File::Spec->join($data_dir, 'expected_tp.bedpe');
    my $cmd = $pkg->create(
        bedpe => File::Spec->join($data_dir, 'a.bedpe'),
        gold_bedpe => File::Spec->join($data_dir, 'gold3.bedpe'),
        bedtools_version => '2.17.0',
        slop => 1000,
        min_hit_support => 2,
        true_positive_file => $tp,
    );
    ok($cmd->execute, "Command executed ok");

    my $expected_stats = {
        true_positive => 1,
        false_positive => 1,
        false_negative => 0,
        ppv => .5,
        sensitivity => 1,
        f1 => 0.666666666666667,
        total_unique_calls => 2,
        total_unique_gold_calls => 3,
    };
    is_deeply($cmd->rawstats, $expected_stats, "stats were set correctly");
    compare_ok($tp, $expected_tp, "True positives were output correctly");
};

done_testing;

